
Answer the following questions


1) What is an instance variable?
    variables defined in a class that belong to an object
2) How do you create a new object?
    classname objectname = new classname
3) After creating a new object, how do you set that objects instance variables?
    objectname.variablename
4) What is a reference variable? Why do you need to be careful with reference variables?
    basically an object. if you have more than one reference to an object, that object can be changed by both references
5) How many methods can you have in a class?
    many, though each class should be focused on a small part of a whole
6) How do you exit a method at any point?
    return
7) What is the method signature required to return an "int" from a method?
    int
8) Assuming "int num = 10", what is the syntax to return "num" from a method?
    int thisMethod() {int num = 10 return num}
9) How do you pass a parameter to a method?
    int thisMethod(int param1, int param2) {}   int param1 = 10 int param 2 = 15
10) What is the method signature for a method named sum() that takes two int parameters
    and returns their sum as in int?
    public int sum(int param1, int param2)
11) What is a constructor?
    constructor specifies input for an object
12) How does Java treat a class without a constructor?
    creates a constructor anyway with default values
13) What would the constructor for "public class Animal" look like?
    Animal(String typeEnvironment, int numLegs, String typeFood) {
    typeEnvironment = typeEnvironment; numLegs = numLegs; typeFood = typeFood;
14) What is the effect of passing parameters to a constructor?
    easier to set initial values of instance variables
15) When should you pass parameters to a constructor?
    at instantiation of object
16) What does the finalize() method do?
    make sure something got done before gc, such as closing a connection
17) What does the "this" keyword do?
    references an instance variable, an object or its parts
18) When should you use the "this" keyword?
    same as 17. It's useful for clarity, especially when building constructors
19) Write an example of the "this" keyword in action.
    public class TryThis {
        int num1;
        int num2;

        TryThis(int num1, int num2) {
            this.num1 = num1;
            this.num2 = num2;
        }
    }
